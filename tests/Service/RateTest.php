<?php

declare(strict_types=1);

namespace CommissionTask\Tests\Service;

use CommissionTask\Exception\Rate\RateDoNotExist as RateDoNotExistException;
use CommissionTask\Factory\Rate\Rate as RateFactory;
use CommissionTask\Repository\Rate\Rate as RateRepository;
use CommissionTask\Service\Configuration as ConfigurationService;
use CommissionTask\Service\Math as MathService;
use CommissionTask\Service\Rate\Rate as RateService;
use PHPUnit\Framework\TestCase;
use ReflectionClass;

class RateTest extends TestCase
{
    protected const RATES_PATH = 'rates';
    protected const DEFAULT_RATES = [
        'EUR' => [
            'USD' => '1.1497',
            'JPY' => '129.53',
        ],
    ];

    protected ConfigurationService $configurationServiceMock;
    protected RateService $rateService;
    protected MathService $mathServiceMock;
    protected RateRepository $rateRepositoryMock;
    protected RateFactory $rateFactory;
    protected RateFactory $rateFactoryMock;

    /**
     * @covers \CommissionTask\Service\Rate::getDefaultRatesArray
     */
    public function testGetDefaultRatesArray()
    {
        $this->configurationServiceMock
            ->expects($this->once())
            ->method('get')
            ->with(...[self::RATES_PATH])
            ->willReturn(self::DEFAULT_RATES)
        ;

        $this->assertEquals(self::DEFAULT_RATES, $this->rateService->getDefaultRatesArray());
    }

    /**
     * @covers \CommissionTask\Service\Rate::isRateSupported
     */
    public function testIsRateSupportedTrue()
    {
        $baseCurrency = 'EUR';
        $quoteCurrency = 'USD';
        $expectedRate = $this->rateFactory->create($baseCurrency, $quoteCurrency, '1.23');

        $this->rateRepositoryMock
            ->expects($this->once())
            ->method('getRateByCodesOrNull')
            ->with(...[$baseCurrency, $quoteCurrency])
            ->willReturn($expectedRate)
        ;

        $this->assertTrue($this->rateService->isRateSupported($baseCurrency, $quoteCurrency));
    }

    /**
     * @covers \CommissionTask\Service\Rate::isRateSupported
     */
    public function testIsRateSupportedFalse()
    {
        $baseCurrency = 'EUR';
        $quoteCurrency = 'USD';

        $this->rateRepositoryMock
            ->expects($this->once())
            ->method('getRateByCodesOrNull')
            ->with(...[$baseCurrency, $quoteCurrency])
            ->willReturn(null)
        ;

        $this->assertFalse($this->rateService->isRateSupported($baseCurrency, $quoteCurrency));
    }

    /**
     * @covers \CommissionTask\Service\Rate::getRateByCodesOrTrow
     */
    public function testGetRateByCodesOrTrow()
    {
        $rateServicePartialMock = $this->createRateServicePartialMock(['isRateSupported']);
        $class = new ReflectionClass(RateService::class);
        $property = $class->getProperty('rateRepository');
        $property->setAccessible(true);
        $property->setValue($rateServicePartialMock, $this->rateRepositoryMock);

        $baseCurrency = 'EUR';
        $quoteCurrency = 'USD';
        $expectedRate = $this->rateFactory->create($baseCurrency, $quoteCurrency, '1.23');

        $rateServicePartialMock
            ->expects($this->once())
            ->method('isRateSupported')
            ->with(...[$baseCurrency, $quoteCurrency])
            ->willReturn(true)
        ;

        $this->rateRepositoryMock
            ->expects($this->once())
            ->method('getRateByCodesOrNull')
            ->with(...[$baseCurrency, $quoteCurrency])
            ->willReturn($expectedRate)
        ;

        $rate = $rateServicePartialMock->getRateByCodesOrTrow($baseCurrency, $quoteCurrency);

        $this->assertEquals($expectedRate, $rate);
    }

    /**
     * @covers \CommissionTask\Service\Rate::getRateByCodesOrTrow
     */
    public function testGetRateByCodesOrTrowRateNotFound()
    {
        $this->expectException(RateDoNotExistException::class);

        $rateServicePartialMock = $this->createRateServicePartialMock(['isRateSupported']);

        $baseCurrency = 'EUR';
        $quoteCurrency = 'USD';

        $rateServicePartialMock
            ->expects($this->once())
            ->method('isRateSupported')
            ->with(...[$baseCurrency, $quoteCurrency])
            ->willReturn(false)
        ;

        $rateServicePartialMock->getRateByCodesOrTrow($baseCurrency, $quoteCurrency);
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->configurationServiceMock = $this->createMock(ConfigurationService::class);
        $this->mathServiceMock = $this->createMock(MathService::class);
        $this->rateRepositoryMock = $this->createMock(RateRepository::class);
        $this->rateFactoryMock = $this->createMock(RateFactory::class);
        $this->rateService = new RateService(
            $this->configurationServiceMock,
            $this->mathServiceMock,
            $this->rateRepositoryMock,
            $this->rateFactoryMock
        );

        $this->rateFactory = new RateFactory();
    }

    protected function createRateServicePartialMock($methods = [])
    {
        $partialMock = $this->createPartialMock(
            RateService::class,
            $methods
        );

        $class = new ReflectionClass(RateService::class);
        $property = $class->getProperty('configurationService');
        $property->setAccessible(true);
        $property->setValue($partialMock, $this->configurationServiceMock);

        return $partialMock;
    }
}