<?php

declare(strict_types=1);

namespace CommissionTask\Tests\Service;

use Carbon\Carbon;
use CommissionTask\Repository\Transaction\Transaction as TransactionRepository;
use CommissionTask\Service\Transaction\Transaction as TransactionService;
use PHPUnit\Framework\TestCase;

class TransactionTest extends TestCase
{
    protected TransactionService $transactionService;
    protected TransactionRepository $transactionRepositoryMock;

    /**
     * @covers \CommissionTask\Service\Transaction::isSupportedTransactionType
     *
     * @dataProvider dataProviderForIsSupportedTransactionType
     */
    public function testIsSupportedTransactionType(string $transactionType, bool $expectation)
    {
        $this->assertEquals($expectation, TransactionService::isSupportedTransactionType($transactionType));
    }

    /**
     * @return array[]
     */
    public function dataProviderForIsSupportedTransactionType()
    {
        return [
            'cash_in type is supported' => ['cash_in', true],
            'cash_out type is supported' => ['cash_out', true],
            'cash type is not supported' => ['cash', false],
        ];
    }

    /**
     * @covers \CommissionTask\Service\Transaction::getWeeklyCashOutTransactionsByCustomerAndDate
     *
     * @dataProvider dataProviderForGetWeeklyCashOutTransactionsByCustomerAndDate
     */
    public function testGetWeeklyCashOutTransactionsByCustomerAndDate(
        int $customerId,
        string $transactionDate,
        string $startOfWeek,
        string $endOfWeek
    ) {
        $this->transactionRepositoryMock
            ->expects($this->once())
            ->method('getCashOutByCustomerIdAndTransactionDate')
            ->with(...[$customerId, (new Carbon($startOfWeek))->startOfDay(), (new Carbon($endOfWeek))->endOfDay()])
        ;

        $this->transactionService->getWeeklyCashOutTransactionsByCustomerAndDate(
            $customerId,
            $transactionDate
        );
    }

    /**
     * @return array[]
     */
    public function dataProviderForGetWeeklyCashOutTransactionsByCustomerAndDate()
    {
        return [
            'transaction in start of week' => [5, '2021-03-01', '2021-03-01', '2021-03-07'],
            'transaction in end of week' => [5, '2021-04-11', '2021-04-05', '2021-04-11'],
            'transaction in middle of week' => [5, '2021-04-03', '2021-03-29', '2021-04-04'],
        ];
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->transactionRepositoryMock = $this->createMock(TransactionRepository::class);
        $this->transactionService = new TransactionService(
            $this->transactionRepositoryMock
        );
    }
}